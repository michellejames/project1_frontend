function handleData(e){function t(){l.checked?(a.style.textDecoration="line-through",l.parentNode.classList.add("done")):l.checked||(a.style.textDecoration="none",l.parentNode.classList.remove("done"))}var o=e;console.log(o[0].completed);for(var c=0;c<o.length;c++){var n=document.querySelector(".toDoItems"),a=document.createElement("li");$(a).html('<input id="checkBox" type="checkbox">'+o[c].task).addClass("task"),n.appendChild(a);var l=document.querySelector("#checkBox"),a=document.querySelector(".task");l.addEventListener("click",t)}}console.log("test"),$.ajax({url:"http://localhost:4005/item",method:"GET",dataType:"json"}).done(function(e){console.log(e),handleData(e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
